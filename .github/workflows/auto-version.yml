name: Auto Version and Release

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: write

jobs:
  auto-version:
    name: Auto Version & Tag
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze commit for version bump
        id: version_check
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          # Determine bump type from conventional commits
          if echo "$COMMIT_MSG" | grep -qE '^(feat|feature)(\(.+\))?!:|^BREAKING CHANGE:'; then
            echo "BUMP=major" >> $GITHUB_OUTPUT
            echo "SHOULD_BUMP=true" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -qE '^(feat|feature)(\(.+\))?:'; then
            echo "BUMP=minor" >> $GITHUB_OUTPUT
            echo "SHOULD_BUMP=true" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -qE '^(fix|bugfix|perf)(\(.+\))?:'; then
            echo "BUMP=patch" >> $GITHUB_OUTPUT
            echo "SHOULD_BUMP=true" >> $GITHUB_OUTPUT
          else
            echo "SHOULD_BUMP=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Commit type doesn't trigger version bump: $COMMIT_MSG"
          fi

      - name: Get current version
        if: steps.version_check.outputs.SHOULD_BUMP == 'true'
        id: current_version
        run: |
          # Extract version from the library file
          CURRENT=$(grep -m1 "^# Text Handler Library v" string_output.sh | sed 's/.*v\([0-9.]*\).*/\1/')
          echo "VERSION=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT"

      - name: Calculate new version
        if: steps.version_check.outputs.SHOULD_BUMP == 'true'
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.VERSION }}"
          BUMP="${{ steps.version_check.outputs.BUMP }}"

          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          case "$BUMP" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION ($BUMP bump)"

      - name: Update version in library
        if: steps.version_check.outputs.SHOULD_BUMP == 'true'
        run: |
          OLD="${{ steps.current_version.outputs.VERSION }}"
          NEW="${{ steps.new_version.outputs.VERSION }}"

          # Update header comment (line ~7)
          sed -i "s/^# Text Handler Library v${OLD}/# Text Handler Library v${NEW}/" string_output.sh

          # Update output_library_info function (line ~1046)
          sed -i "s/local version=\"${OLD}\"/local version=\"${NEW}\"/" string_output.sh

          # Add changelog entry (after "# Changelog:" line)
          DATE=$(date +%Y-%m-%d)
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          # Extract first line of commit message
          CHANGE_DESC=$(echo "$COMMIT_MSG" | head -n1)

          sed -i "/^# Changelog:/a\\
# v${NEW} (${DATE})\\
#   - ${CHANGE_DESC}\\
#" string_output.sh

          echo "✅ Updated version $OLD → $NEW in string_output.sh"

      - name: Commit version bump
        if: steps.version_check.outputs.SHOULD_BUMP == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          NEW="${{ steps.new_version.outputs.VERSION }}"

          git add string_output.sh
          git commit -m "chore: bump version to v${NEW}"
          git push origin ${{ github.ref_name }}

      - name: Create and push tag
        if: steps.version_check.outputs.SHOULD_BUMP == 'true'
        run: |
          NEW="${{ steps.new_version.outputs.VERSION }}"

          git tag "v${NEW}"
          git push origin "v${NEW}"

          echo "🏷️ Created and pushed tag v${NEW}"

      - name: Summary
        if: steps.version_check.outputs.SHOULD_BUMP == 'true'
        run: |
          echo "### 🎉 Auto Version Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Old Version:** ${{ steps.current_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.new_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type:** ${{ steps.version_check.outputs.BUMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** v${{ steps.new_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release workflow will trigger automatically." >> $GITHUB_STEP_SUMMARY

      - name: Skip summary
        if: steps.version_check.outputs.SHOULD_BUMP == 'false'
        run: |
          echo "### ℹ️ No Version Bump" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Commit type doesn't trigger versioning:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
